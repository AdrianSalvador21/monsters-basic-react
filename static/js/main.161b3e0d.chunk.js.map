{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","user","id","key","name","email","CardList","console","log","users","map","SeachBox","setSeatchField","filterDataEvent","type","placeholder","onChange","e","target","value","App","useState","saveUsers","searchField","filterData","setFilterData","useEffect","getData","fetch","then","response","json","filteredMonsters","filter","monster","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8RAaeA,G,kBAVF,SAACC,GACZ,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BACtB,wBAAIC,IAAKN,EAAMI,KAAKC,IAAKL,EAAMI,KAAKG,MACpC,2BAAIP,EAAMI,KAAKI,UCQNC,EAbE,SAACT,GAEhB,OADAU,QAAQC,IAAIX,GAEV,yBAAKC,UAAU,aAEXD,EAAMY,MAAMC,KAAI,SAAAT,GAAI,OAClB,kBAAC,EAAD,CAAMA,KAAMA,EAAME,IAAKF,EAAKC,UCKvBS,G,MAXE,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,gBACjC,OACE,6BACE,2BAAOf,UAAU,SAASgB,KAAK,OAAOC,YAAY,kBAAkBC,SAAU,SAAAC,GAC5EL,EAAeK,EAAEC,OAAOC,OACxBN,EAAgBI,SC4CTG,MA/Cf,WAAe,MAEcC,mBAAS,IAFvB,mBAENZ,EAFM,KAECa,EAFD,OAGyBD,mBAAS,IAHlC,mBAGNE,EAHM,KAGOX,EAHP,OAIuBS,mBAAS,IAJhC,mBAING,EAJM,KAIMC,EAJN,KAMbC,qBAAU,WACRC,MACC,IAGH,IAAMA,EAAU,WACdC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAApB,GACJF,QAAQC,IAAIC,GACZa,EAAUb,GACVgB,EAAchB,OAgBpB,OACE,yBAAKX,UAAU,OACb,6CAEA,kBAAC,EAAD,CACEc,eAAgBA,EAChBC,gBAlBkB,SAACI,GAGvB,GAFAV,QAAQC,IAAIS,EAAEC,OAAOC,OACrBZ,QAAQC,IAAIe,GACW,KAAnBN,EAAEC,OAAOC,MAGX,OAFAZ,QAAQC,IAAI,cACZiB,EAAchB,GAGhB,IAAMuB,EAAmBvB,EAAMwB,QAAO,SAAAC,GAAO,OAAIA,EAAQ9B,KAAK+B,cAAcC,SAASnB,EAAEC,OAAOC,MAAMgB,kBACpGV,EAAcO,MAYZ,kBAAC,EAAD,CAAUvB,MAAOe,MCnCHa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.161b3e0d.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nconst Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img alt=\"monster\" src={`https://robohash.org/${props.user.id}?set=set2&size=180x180`}/>\n      <h2 key={props.user.id}>{props.user.name}</h2>\n      <p>{props.user.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport './card-list.styles.css';\nimport Card from \"../card/card.component\";\nconst CardList = (props) => {\n  console.log(props);\n  return (\n    <div className='card-list'>\n      {\n        props.users.map(user => (\n          <Card user={user} key={user.id}/>\n        ))\n      }\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\nimport './search-box.styles.css';\n\nconst SeachBox = ({setSeatchField, filterDataEvent}) => {\n  return (\n    <div>\n      <input className=\"search\" type=\"text\" placeholder=\"Search monsters\" onChange={e => {\n        setSeatchField(e.target.value);\n        filterDataEvent(e);\n      }}/>\n    </div>\n  );\n};\n\nexport default SeachBox;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport CardList from \"./components/card-list/card-list.component\";\nimport SeachBox from \"./components/search-box/search-box.component\";\n\nfunction App() {\n  // State para Proyecto\n  const [users, saveUsers] = useState([]);\n  const [searchField, setSeatchField] = useState('');\n  const [filterData, setFilterData] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n\n  const getData = () => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {\n        console.log(users);\n        saveUsers(users);\n        setFilterData(users);\n      });\n  };\n\n  const filterDataEvent = (e) => {\n    console.log(e.target.value);\n    console.log(searchField);\n    if (e.target.value === '') {\n      console.log('VACIO');\n      setFilterData(users);\n      return;\n    }\n    const filteredMonsters = users.filter(monster => monster.name.toLowerCase().includes(e.target.value.toLowerCase()));\n    setFilterData(filteredMonsters);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Info</h1>\n\n      <SeachBox\n        setSeatchField={setSeatchField}\n        filterDataEvent={filterDataEvent}\n      />\n\n      <CardList users={filterData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}